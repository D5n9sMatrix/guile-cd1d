;; -*- mode: emacs-lisp; lexical-binding:t; coding: utf-8-emacs; -*-
;; --------------------------------------------------------------------------
;; Desktop File for Emacs
;; --------------------------------------------------------------------------
;; Created Wed Oct 25 12:39:24 2023
;; Desktop file format version 208
;; Emacs version 29.1

;; Global section:
(setq desktop-saved-frameset [frameset 1 (25913 13996 341811 164000) (desktop . "208") "admin@pop-os" nil nil ((((minibuffer . t) (undecorated) (override-redirect) (font . "-PfEd-DejaVu Sans Mono-regular-normal-normal-*-13-*-*-*-m-0-iso10646-1") (border-width . 0) (internal-border-width . 0) (child-frame-border-width) (right-divider-width . 0) (bottom-divider-width . 0) (vertical-scroll-bars . right) (horizontal-scroll-bars) (foreground-color . "black") (background-color . "white") (mouse-color . "black") (border-color . "black") (screen-gamma) (line-spacing) (left-fringe . 8) (right-fringe . 8) (no-special-glyphs) (scroll-bar-foreground) (scroll-bar-background) (menu-bar-lines . 1) (tab-bar-lines . 1) (tool-bar-lines . 1) (title) (wait-for-wm . t) (tool-bar-position . top) (inhibit-double-buffering) (icon-type . t) (auto-raise) (auto-lower) (cursor-type . box) (scroll-bar-width . 16) (scroll-bar-height . 16) (alpha) (alpha-background) (no-focus-on-map) (no-accept-focus) (fullscreen . maximized) (visibility . t) (use-frame-synchronization) (skip-taskbar) (z-group) (display-type . color) (background-mode . light) (cursor-color . "black") (font-parameter) (sticky) (shaded) (environment) (dnd-root-window-position) (last-focus-update . t) (tabs (current-tab (name . "openaccess.el") (explicit-name)) (tab (name . "ielm.el.gz") (explicit-name) (time . 1698247868.2518091) (ws ((min-height . 8) (min-width . 20) (min-height-ignore . 4) (min-width-ignore . 12) (min-height-safe . 2) (min-width-safe . 4) (min-pixel-height . 136) (min-pixel-width . 160) (min-pixel-height-ignore . 68) (min-pixel-width-ignore . 96) (min-pixel-height-safe . 34) (min-pixel-width-safe . 32)) vc (pixel-width . 1366) (pixel-height . 525) (total-width . 171) (total-height . 31) (normal-height . 1.0) (normal-width . 1.0) (combination-limit . t) (leaf (pixel-width . 1366) (pixel-height . 202) (total-width . 171) (total-height . 12) (normal-height . 0.3704761904761905) (normal-width . 1.0) (buffer "*ielm*" (selected) (hscroll . 0) (fringes 8 8 nil nil) (margins nil) (scroll-bars nil 2 t nil 0 t nil) (vscroll . 0) (dedicated) (point . 3181) (start . 3091)) (prev-buffers ("openaccess.el" 1834 2538))) (hc (last . t) (pixel-width . 1366) (pixel-height . 323) (total-width . 171) (total-height . 19) (normal-height . 0.6295238095238095) (normal-width . 1.0) (combination-limit) (leaf (pixel-width . 686) (pixel-height . 323) (total-width . 86) (total-height . 19) (normal-height . 1.0) (normal-width . 0.5) (buffer "*Backtrace*" (selected) (hscroll . 0) (fringes 8 8 nil nil) (margins nil) (scroll-bars nil 2 t nil 0 t nil) (vscroll . 0) (dedicated) (point . 228) (start . 1))) (leaf (last . t) (pixel-width . 680) (pixel-height . 323) (total-width . 85) (total-height . 19) (normal-height . 1.0) (normal-width . 0.5) (buffer "ielm.el.gz" (selected . t) (hscroll . 0) (fringes 8 8 nil nil) (margins nil) (scroll-bars nil 2 t nil 0 t nil) (vscroll . 0) (dedicated) (point . 1) (start . 1)))))) (tab (name . "isoformscox.el") (explicit-name) (time . 1698247871.4016597) (ws ((min-height . 4) (min-width . 10) (min-height-ignore . 2) (min-width-ignore . 6) (min-height-safe . 1) (min-width-safe . 2) (min-pixel-height . 68) (min-pixel-width . 80) (min-pixel-height-ignore . 34) (min-pixel-width-ignore . 48) (min-pixel-height-safe . 17) (min-pixel-width-safe . 16)) leaf (pixel-width . 1366) (pixel-height . 525) (total-width . 170) (total-height . 30) (normal-height . 1.0) (normal-width . 1.0) (buffer "isoformscox.el" (selected . t) (hscroll . 0) (fringes 8 8 nil nil) (margins nil) (scroll-bars nil 2 t nil 0 t nil) (vscroll . 0) (dedicated) (point . 388) (start . 1)) (prev-buffers ("*ielm*" 1 3181))))) (frameset--id . "D79A-C35F-769F-9ACC") (frameset--mini t . t) (height . 31) (width . 166) (modeline . t) (unsplittable) (left + -1) (top . 31) (icon-name) (display . ":1") (explicit-name)) ((min-height . 8) (min-width . 10) (min-height-ignore . 4) (min-width-ignore . 6) (min-height-safe . 2) (min-width-safe . 2) (min-pixel-height . 136) (min-pixel-width . 80) (min-pixel-height-ignore . 68) (min-pixel-width-ignore . 48) (min-pixel-height-safe . 34) (min-pixel-width-safe . 16)) vc (pixel-width . 1366) (pixel-height . 525) (total-width . 171) (total-height . 31) (normal-height . 1.0) (normal-width . 1.0) (combination-limit) (leaf (pixel-width . 1366) (pixel-height . 423) (total-width . 171) (total-height . 25) (normal-height . 0.8054123711340206) (normal-width . 1.0) (buffer "openaccess.el" (selected) (hscroll . 0) (fringes 8 8 nil nil) (margins nil) (scroll-bars nil 2 t nil 0 t nil) (vscroll . 0) (dedicated) (point . 1463) (start . 927)) (prev-buffers ("*Messages*" 1499 1549))) (leaf (last . t) (pixel-width . 1366) (pixel-height . 102) (total-width . 171) (total-height . 6) (normal-height . 0.19458762886597938) (normal-width . 1.0) (buffer "*Compile-Log*" (selected) (hscroll . 0) (fringes 8 8 nil nil) (margins nil) (scroll-bars nil 2 t nil 0 t nil) (vscroll . 0) (dedicated) (point . 1577) (start . 1383)))))])
(setq desktop-missing-file-warning nil)
(setq tags-file-name nil)
(setq tags-table-list nil)
(setq search-ring nil)
(setq regexp-search-ring nil)
(setq register-alist '((48 . #("(defun string-type (string &optional type\n			    open &rest access)\n  \"2.4.8 String Type\nA string is an array of characters. Strings are used for many purposes in\nEmacs, as can be expected in a text editor; for example, as the names of Lisp\nsymbols, as messages for the user, and to represent text extracted from\nbuffers. Strings in Lisp are constants: evaluation of a string returns the\nsame string.\n\nSee Strings and Characters, for functions that operate on strings.\n\nSyntax for Strings\nNon-ASCII Characters in Strings\nNonprinting Characters in Strings\nText Properties in Strings\"\n  (declare (string &optional type\n		   open &rest access)\n	   (if (string type)\n	       (t (function (string type))\n		  (string type)))\n	   (if (open access)\n	       (t (function (open access))\n		  (open access)))))\n  \n\n(defun string-and-character (string &optional character\n				    open &rest access)\n    \"4 Strings and Characters\nA string in Emacs Lisp is an array that contains an ordered sequence of characters.\nStrings are used as names of symbols, buffers, and files; to send messages to users;\nto hold text being copied between buffers; and for many other purposes. Because strings\nare so important, Emacs Lisp has many functions expressly for manipulating them. Emacs\nLisp programs use strings more often than individual characters.\n\nSee Putting Keyboard Events in Strings, for special considerations for strings of keyboard\ncharacter events.\n\nString and Character Basics\nPredicates for Strings\nCreating Strings\nModifying Strings\nComparison of Characters and Strings\nConversion of Characters and Strings\nFormatting Strings\nCustom Format Strings\nCase Conversion in Lisp\nThe Case Table\"\n    (declare (string &optional character\n		     open &rest access)\n	     (if (string character)\n		 (t (function (string character))\n		    (string character)))\n	     (if (open access)\n		 (t (function (string character))\n		    (string character)))))\n\n" 0 1 (fontified t) 1 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 18 (face font-lock-function-name-face fontified t) 18 27 (fontified t) 27 36 (face font-lock-type-face fontified t) 36 41 (fontified t) 41 42 (fontified t) 42 54 (fontified t) 54 59 (face font-lock-type-face fontified t) 59 67 (fontified t) 67 68 (fontified t) 68 70 (fontified t) 70 71 (face font-lock-doc-face fontified t) 71 89 (face font-lock-doc-face fontified t) 89 163 (face font-lock-doc-face fontified t) 163 241 (face font-lock-doc-face fontified t) 241 313 (face font-lock-doc-face fontified t) 313 401 (face font-lock-doc-face fontified t) 401 489 (face font-lock-doc-face fontified t) 489 521 (face font-lock-doc-face fontified t) 521 555 (face font-lock-doc-face fontified t) 555 580 (face font-lock-doc-face fontified t) 580 581 (face font-lock-doc-face fontified t rear-nonsticky t) 581 582 (face font-lock-doc-face fontified t) 582 583 (fontified t) 583 586 (fontified t) 586 593 (face font-lock-keyword-face fontified t) 593 602 (fontified t) 602 611 (face font-lock-type-face fontified t) 611 617 (fontified t) 617 627 (fontified t) 627 632 (face font-lock-type-face fontified t) 632 641 (fontified t) 641 646 (fontified t) 646 648 (face font-lock-keyword-face fontified t) 648 663 (fontified t) 663 675 (fontified t) 675 683 (face font-lock-keyword-face fontified t) 683 699 (fontified t) 699 719 (fontified t) 719 723 (fontified t) 723 724 (fontified t) 724 726 (face font-lock-keyword-face fontified t) 726 741 (fontified t) 741 753 (fontified t) 753 761 (face font-lock-keyword-face fontified t) 761 777 (fontified t) 777 799 (fontified t) 799 802 (fontified t) 802 803 (fontified t) 803 804 (fontified t) 804 809 (face font-lock-keyword-face fontified t) 809 810 (fontified t) 810 830 (face font-lock-function-name-face fontified t) 830 839 (fontified t) 839 848 (face font-lock-type-face fontified t) 848 859 (fontified t) 859 872 (fontified t) 872 877 (face font-lock-type-face fontified t) 877 885 (fontified t) 885 886 (fontified t) 886 890 (fontified t) 890 891 (face font-lock-doc-face fontified t) 891 916 (face font-lock-doc-face fontified t) 916 1000 (face font-lock-doc-face fontified t) 1000 1085 (face font-lock-doc-face fontified t) 1085 1173 (face font-lock-doc-face fontified t) 1173 1325 (face font-lock-doc-face fontified t) 1325 1326 (face font-lock-doc-face fontified t) 1326 1435 (face font-lock-doc-face fontified t) 1435 1661 (face font-lock-doc-face fontified t) 1661 1674 (face font-lock-doc-face fontified t) 1674 1675 (face font-lock-doc-face fontified t rear-nonsticky t) 1675 1676 (face font-lock-doc-face fontified t) 1676 1677 (fontified t) 1677 1682 (fontified t) 1682 1689 (face font-lock-keyword-face fontified t) 1689 1698 (fontified t) 1698 1707 (face font-lock-type-face fontified t) 1707 1718 (fontified t) 1718 1730 (fontified t) 1730 1735 (face font-lock-type-face fontified t) 1735 1744 (fontified t) 1744 1751 (fontified t) 1751 1753 (face font-lock-keyword-face fontified t) 1753 1773 (fontified t) 1773 1780 (fontified t) 1780 1788 (face font-lock-keyword-face fontified t) 1788 1809 (fontified t) 1809 1836 (fontified t) 1836 1842 (fontified t) 1842 1843 (fontified t) 1843 1845 (face font-lock-keyword-face fontified t) 1845 1860 (fontified t) 1860 1867 (fontified t) 1867 1875 (face font-lock-keyword-face fontified t) 1875 1896 (fontified t) 1896 1924 (fontified t) 1924 1925 (fontified t) 1925 1926 (fontified t)))))
(setq file-name-history '("/home/admin/dlang-project/guile-cd1d/matrix/bin/bsp85" "/home/admin/dlang-project/guile-cd1d/matrix/bin/bsp85/openaccess.el" "/home/admin/dlang-project/guile-cd1d/matrix/bin/bsp85" "/home/admin/dlang-project/guile-cd1d/matrix/bin/bsp85/openaccess.el" "/home/admin/dlang-project/guile-cd1d/matrix/bin/bsp85/isoformscox.el"))

;; Buffer section -- buffers listed in same order as in buffer list:
(desktop-create-buffer 208
  "/home/admin/dlang-project/guile-cd1d/matrix/bin/bsp85/openaccess.el"
  "openaccess.el"
  'emacs-lisp-mode
  '(font-lock-mode eldoc-mode)
  1463
  '(673 nil)
  nil
  nil
  '((buffer-display-time 25913 13979 628178 140000) (buffer-file-coding-system . utf-8-unix))
  '((mark-ring (1428 1447 1447))))

(desktop-create-buffer 208
  "/home/admin/dlang-project/guile-cd1d/matrix/bin/bsp85/isoformscox.el"
  "isoformscox.el"
  'emacs-lisp-mode
  '(font-lock-mode eldoc-mode)
  388
  '(388 nil)
  nil
  nil
  '((buffer-display-time 25913 11429 512071 787000) (buffer-file-coding-system . prefer-utf-8-unix))
  '((mark-ring nil)))

(desktop-create-buffer 208
  "/app/share/emacs/29.1/lisp/ielm.el.gz"
  "ielm.el.gz"
  'emacs-lisp-mode
  '(font-lock-mode eldoc-mode)
  1
  '(26938 nil)
  t
  nil
  '((buffer-display-time 25913 13462 307550 15000) (buffer-file-coding-system . prefer-utf-8-unix))
  '((mark-ring (11188 11582))))

